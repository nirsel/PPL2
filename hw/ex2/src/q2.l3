(define append 
  (lambda (lst1 lst2)
      (if (eq? lst1 '()) 
      lst2
      (cons (car lst1) 
            (append (cdr lst1) lst2))))
)


(define reverse 
  (lambda (lst)
        (if (eq? lst '()) 
          '()
          (append (reverse (cdr lst)) (list (car lst)))
        )
  )
)

(define duplicate-first
  (lambda (lst item num)
    (if (= 0 num)
        lst
        (duplicate-first (cons item lst) item (- num 1)))))

(define duplicate-items
  (lambda (lst dup-count)
    (if (eq? lst '()) 
        lst
        (append (duplicate-first '() (car lst) (car dup-count)) (duplicate-items (cdr lst) (append (cdr dup-count) (list(car dup-count))))))))


(define remove-all
  (lambda (x lst)
    (if (eq? '() lst)
        lst
        (if (eq? (car lst) x)
            (remove-all x (cdr lst))
            (cons (car lst) (remove-all x (cdr lst)))))))
  
(define payment
  (lambda (n coins-lst)
        (if (= 0 n)
        1
        (if (or (< n 0) (eq? '() coins-lst))
        0
         (+ (payment n (remove-all (car coins-lst) coins-lst)) (payment (- n (car coins-lst)) (cdr coins-lst)))))))
                               
(define compose-n
  (lambda(f n)
        (if (= n 1)
            (lambda (x) (f x))
         (lambda (x) (f ((compose-n f (- n 1)) x)))
  )))

  

