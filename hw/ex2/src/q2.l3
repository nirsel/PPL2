(define append 
  (lambda (lst1 lst2)
      (if (empty? lst1) 
      lst2
      (cons (car lst1) 
            (append (cdr lst1) lst2))))
)


(define reverse 
  (lambda (lst)
        (if (empty? lst)
          '()
          (append (reverse (cdr lst)) (list (car lst)))
        )
  )
)

;(define duplicate-items
 ;  (lambda(lst dup-count)
 ;     @TODO
;  )
;)


;(define payment
 ; (lambda (n coins-lst)
  ;      @TODO
  ;)
;)
                               
;(define compose-n
 ; (lambda( f n)
 ;       @TODO
 ; )
;)

(append '(1 2) '(3 4))